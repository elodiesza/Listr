{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useForm, Controller } from 'react-hook-form';\nimport { container, colors } from \"../styles\";\nimport uuid from 'react-native-uuid';\nimport Modal from 'react-native-modal';\nimport { Feather } from '@expo/vector-icons';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar width = Dimensions.get('window').width;\nfunction NewProgress(_ref) {\n  var addModalVisible = _ref.addModalVisible,\n    setAddModalVisible = _ref.setAddModalVisible,\n    db = _ref.db,\n    progress = _ref.progress,\n    setProgress = _ref.setProgress,\n    section = _ref.section,\n    track = _ref.track;\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    reset = _useForm.reset;\n  var addProgress = function () {\n    var _ref2 = _asyncToGenerator(function* (data) {\n      var existingProgress = _toConsumableArray(progress);\n      db.transaction(function (tx) {\n        tx.executeSql('INSERT INTO progress (id, name, track, list, progress, rate) values (?,?,?,?,?,?)', [uuid.v4(), data.name, track, section, 0, 0], function (txtObj, resultSet) {\n          existingProgress.push({\n            id: uuid.v4(),\n            name: data.name,\n            track: track,\n            list: section,\n            progress: 0,\n            rate: 0\n          });\n          setProgress(existingProgress);\n        }, function (txtObj, error) {\n          return console.warn('Error inserting data:', error);\n        });\n      });\n      setAddModalVisible(false);\n      reset();\n    });\n    return function addProgress(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(Modal, {\n    isVisible: addModalVisible,\n    onBackdropPress: function onBackdropPress() {\n      setAddModalVisible(!addModalVisible);\n    },\n    backdropColor: \"white\",\n    avoidKeyboard: true,\n    style: {\n      margin: 0,\n      justifyContent: 'flex-end',\n      alignItems: 'center',\n      width: width\n    },\n    children: _jsx(TouchableOpacity, {\n      onPressOut: function onPressOut() {\n        setAddModalVisible(!addModalVisible);\n      },\n      activeOpacity: 1,\n      children: _jsx(TouchableWithoutFeedback, {\n        children: _jsxs(View, {\n          style: [container.newModal, {\n            padding: 5\n          }],\n          children: [_jsxs(Text, {\n            children: [\"Add a new progress bar to \", section]\n          }), _jsxs(View, {\n            style: {\n              flexDirection: 'row'\n            },\n            children: [_jsx(Controller, {\n              control: control,\n              name: \"name\",\n              render: function render(_ref3) {\n                var _ref3$field = _ref3.field,\n                  value = _ref3$field.value,\n                  onChange = _ref3$field.onChange,\n                  onBlur = _ref3$field.onBlur,\n                  error = _ref3.fieldState.error;\n                return _jsxs(View, {\n                  style: {\n                    flexDirection: 'column'\n                  },\n                  children: [_jsx(TextInput, {\n                    value: value,\n                    onChangeText: onChange,\n                    onBlur: onBlur,\n                    placeholder: \"\",\n                    style: [container.textinput, {\n                      height: 40,\n                      borderColor: error ? 'red' : '#e8e8e8'\n                    }]\n                  }), error && _jsx(Text, {\n                    style: {\n                      color: 'red',\n                      alignSelf: 'stretch'\n                    },\n                    children: error.message || 'Error'\n                  })]\n                });\n              },\n              rules: {\n                required: 'Input a name for your progress bar',\n                minLength: {\n                  value: 3,\n                  message: 'Task should be at least 3 characters long'\n                },\n                maxLength: {\n                  value: 36,\n                  message: 'Task should be max 70 characters long'\n                }\n              }\n            }), _jsx(Pressable, {\n              onPress: handleSubmit(addProgress),\n              style: {\n                justifyContent: 'center',\n                height: 40,\n                flex: 1,\n                alignItems: 'center'\n              },\n              children: _jsx(Feather, {\n                name: \"plus-circle\",\n                color: colors.primary.purple,\n                size: 20\n              })\n            })]\n          })]\n        })\n      })\n    })\n  });\n}\n;\nexport default NewProgress;","map":{"version":3,"names":["React","Dimensions","TouchableWithoutFeedback","TouchableOpacity","TextInput","Pressable","Text","View","useForm","Controller","container","colors","uuid","Modal","Feather","jsxs","_jsxs","jsx","_jsx","width","get","NewProgress","_ref","addModalVisible","setAddModalVisible","db","progress","setProgress","section","track","_useForm","control","handleSubmit","reset","addProgress","_ref2","_asyncToGenerator","data","existingProgress","_toConsumableArray","transaction","tx","executeSql","v4","name","txtObj","resultSet","push","id","list","rate","error","console","warn","_x","apply","arguments","isVisible","onBackdropPress","backdropColor","avoidKeyboard","style","margin","justifyContent","alignItems","children","onPressOut","activeOpacity","newModal","padding","flexDirection","render","_ref3","_ref3$field","field","value","onChange","onBlur","fieldState","onChangeText","placeholder","textinput","height","borderColor","color","alignSelf","message","rules","required","minLength","maxLength","onPress","flex","primary","purple","size"],"sources":["/Users/elodie/Documents/GIT/todo/modal/NewProgress.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Dimensions, TouchableWithoutFeedback,TouchableOpacity, StyleSheet, TextInput, Pressable, Text, View } from 'react-native';\nimport { useForm, Controller, set } from 'react-hook-form';\nimport { container, colors} from '../styles';\nimport uuid from 'react-native-uuid';\nimport Modal from 'react-native-modal';\nimport { Feather } from '@expo/vector-icons';\n\nconst width = Dimensions.get('window').width;\n\nfunction NewProgress({addModalVisible, setAddModalVisible, db, progress, setProgress, section, track}) {\n  \n  const {control, handleSubmit, reset} = useForm();\n\n\n  const addProgress = async (data) => {\n    let existingProgress = [...progress]; \n        db.transaction((tx) => {\n          tx.executeSql('INSERT INTO progress (id, name, track, list, progress, rate) values (?,?,?,?,?,?)',[ uuid.v4(),data.name, track, section, 0,0],\n          (txtObj,resultSet)=> {    \n            existingProgress.push({ id: uuid.v4(), name: data.name, track: track, list: section, progress: 0, rate: 0});\n            setProgress(existingProgress);\n          },\n          (txtObj, error) => console.warn('Error inserting data:', error)\n          );\n        });\n    setAddModalVisible(false);\n    reset();\n  };\n\n\n\n  return (\n    <Modal\n      isVisible={addModalVisible}\n      onBackdropPress={() => {\n        setAddModalVisible(!addModalVisible);\n      }}\n      backdropColor='white'\n      avoidKeyboard={true}\n      style={{margin: 0,justifyContent:'flex-end',alignItems:'center', width:width}}\n    > \n      <TouchableOpacity onPressOut={() => {\n        setAddModalVisible(!addModalVisible);\n        }} \n        activeOpacity={1}>\n        <TouchableWithoutFeedback>\n          <View style={[container.newModal,{padding:5}]}>\n            <Text>Add a new progress bar to {section}</Text>\n            <View style={{flexDirection:'row'}}>\n              <Controller\n                control= {control}\n                name=\"name\"\n                render={({field: {value, onChange, onBlur}, fieldState: {error}}) => (\n                  <View style={{flexDirection:'column'}}>\n                    <TextInput\n                      value={value}\n                      onChangeText={onChange}\n                      onBlur={onBlur}\n                      placeholder=\"\"\n                      style={[container.textinput,{height:40, borderColor: error ? 'red' : '#e8e8e8'}]}\n                    />\n                    {error && (\n                      <Text style={{color: 'red', alignSelf: 'stretch'}}>{error.message || 'Error'}</Text>\n                    )}\n                  </View>\n                )}\n                rules={{\n                  required: 'Input a name for your progress bar',\n                  minLength: {\n                    value: 3,\n                    message: 'Task should be at least 3 characters long',\n                  },\n                  maxLength: {\n                    value: 36,\n                    message: 'Task should be max 70 characters long',\n                  },\n                }}\n              />\n              <Pressable onPress={handleSubmit(addProgress)} style={{justifyContent:'center',height:40, flex:1, alignItems:'center'}}>\n                <Feather name='plus-circle' color={colors.primary.purple} size={20}/>\n              </Pressable>\n            </View>\n          </View> \n        </TouchableWithoutFeedback>\n      </TouchableOpacity>\n    </Modal>\n  );\n};\n\nexport default NewProgress;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}