{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { useState } from 'react';\nimport { colors } from \"../styles\";\nimport Slider from '@react-native-community/slider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar width = Dimensions.get('window').width;\nfunction ProgressBar(_ref) {\n  var db = _ref.db,\n    name = _ref.name,\n    progress = _ref.progress,\n    setProgress = _ref.setProgress,\n    value = _ref.value,\n    id = _ref.id,\n    color = _ref.color;\n  var _useState = useState(value),\n    _useState2 = _slicedToArray(_useState, 2),\n    newProgress = _useState2[0],\n    setNewProgress = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    nameClicked = _useState4[0],\n    setNameClicked = _useState4[1];\n  var updateProgress = function updateProgress(id) {\n    var existingProgress = _toConsumableArray(progress);\n    var indexToUpdate = existingProgress.findIndex(function (c) {\n      return c.id === id;\n    });\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE progress SET progress = ? WHERE id = ?', [newProgress, id], function (txObj, resultSet) {\n        if (resultSet.rowsAffected > 0) {\n          existingProgress[indexToUpdate].progress = newProgress;\n          setProgress(existingProgress);\n        }\n      }, function (txObj, error) {\n        return console.log('Error updating data', error);\n      });\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      flexDirection: 'row',\n      backgroundColor: colors.primary.white,\n      width: width * 0.9,\n      height: 40,\n      flex: 1\n    },\n    children: [_jsx(Pressable, {\n      onPress: function onPress() {\n        return setNameClicked(!nameClicked);\n      },\n      style: {\n        flex: nameClicked ? 3 / 4 : 1 / 4,\n        justifyContent: 'center',\n        marginLeft: 10\n      },\n      children: _jsx(Text, {\n        style: {\n          textAlign: 'left'\n        },\n        children: name\n      })\n    }), _jsxs(View, {\n      style: {\n        flex: nameClicked ? 1 / 4 : 3 / 4,\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: [_jsx(View, {\n        style: {\n          flex: 1,\n          borderWidth: 1,\n          borderRadius: 10,\n          position: 'absolute',\n          alignItems: 'flex-start',\n          justifyContent: 'center',\n          width: '90%',\n          backgroundColor: colors.primary.white,\n          height: 30\n        },\n        children: _jsx(View, {\n          style: {\n            position: 'absolute',\n            borderRadius: 10,\n            width: value + '%',\n            backgroundColor: color,\n            height: 28\n          }\n        })\n      }), _jsx(Slider, {\n        style: {\n          width: '91%',\n          height: 40\n        },\n        value: value,\n        onValueChange: function onValueChange(value) {\n          setNewProgress(value);\n          updateProgress(id);\n        },\n        step: 1,\n        thumbTintColor: 'transparent',\n        minimumValue: 0,\n        maximumValue: 101,\n        minimumTrackTintColor: 'transparent',\n        maximumTrackTintColor: 'transparent'\n      })]\n    })]\n  });\n}\nexport default ProgressBar;","map":{"version":3,"names":["useState","colors","Slider","jsx","_jsx","jsxs","_jsxs","width","Dimensions","get","ProgressBar","_ref","db","name","progress","setProgress","value","id","color","_useState","_useState2","_slicedToArray","newProgress","setNewProgress","_useState3","_useState4","nameClicked","setNameClicked","updateProgress","existingProgress","_toConsumableArray","indexToUpdate","findIndex","c","transaction","tx","executeSql","txObj","resultSet","rowsAffected","error","console","log","View","style","flexDirection","backgroundColor","primary","white","height","flex","children","Pressable","onPress","justifyContent","marginLeft","Text","textAlign","alignItems","borderWidth","borderRadius","position","onValueChange","step","thumbTintColor","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor"],"sources":["/Users/elodie/Documents/GIT/todo/components/ProgressBar.tsx"],"sourcesContent":["import { StyleSheet, Button, TouchableOpacity, Text, View, Dimensions, Pressable, ScrollView } from 'react-native';\nimport { useState, useEffect } from 'react';\nimport { container, colors} from '../styles';\nimport Slider from '@react-native-community/slider';\n\n\n\nconst width = Dimensions.get('window').width;\n\nfunction ProgressBar({db, name, progress, setProgress, value, id, color}) {\n\n  const [newProgress, setNewProgress] = useState(value);\n  const [nameClicked, setNameClicked] = useState(false);\n  \n\n  const updateProgress = (id) => {\n    let existingProgress=[...progress];\n    const indexToUpdate = existingProgress.findIndex(c => c.id === id);\n      db.transaction(tx=> {\n        tx.executeSql('UPDATE progress SET progress = ? WHERE id = ?', [newProgress, id],\n          (txObj, resultSet) => {\n            if (resultSet.rowsAffected > 0) {\n              existingProgress[indexToUpdate].progress = newProgress;\n              setProgress(existingProgress);\n            }\n          },\n          (txObj, error) => console.log('Error updating data', error)\n        );\n      });\n  };\n\n  return (\n    <View style={{flexDirection:'row',backgroundColor:colors.primary.white,width:width*0.9, height:40,flex:1}}>\n        <Pressable onPress={()=>setNameClicked(!nameClicked)} style={{flex:nameClicked?3/4:1/4,justifyContent:'center', marginLeft:10}}>\n          <Text style={{textAlign:'left'}}>{name}</Text>\n        </Pressable>\n        <View style={{flex: nameClicked? 1/4:3/4, alignItems:'center', justifyContent:'center'}}>\n          <View style={{flex:1,borderWidth:1,borderRadius:10,position:'absolute', alignItems:'flex-start', justifyContent:'center', width:'90%', backgroundColor:colors.primary.white, height:30}}>\n            <View style={{position:'absolute',borderRadius:10, width:value+'%', backgroundColor:color, height:28}}/>\n          </View>\n          <Slider\n            style={{width: '91%', height: 40}}\n            value={value}\n            onValueChange={(value) => {setNewProgress(value);updateProgress(id);}}\n            step={1}\n            thumbTintColor={'transparent'}\n            minimumValue={0}\n            maximumValue={101}\n            minimumTrackTintColor={'transparent'}\n            maximumTrackTintColor={'transparent'}\n          />\n        </View>\n    </View>\n  );\n}\nexport default ProgressBar;\n\n"],"mappings":";;;;;;AACA,SAASA,QAAQ,QAAmB,OAAO;AAC3C,SAAoBC,MAAM;AAC1B,OAAOC,MAAM,MAAM,gCAAgC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAIpD,IAAMC,KAAK,GAAGC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACF,KAAK;AAE5C,SAASG,WAAWA,CAAAC,IAAA,EAAsD;EAAA,IAApDC,EAAE,GAAAD,IAAA,CAAFC,EAAE;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IAAEC,WAAW,GAAAJ,IAAA,CAAXI,WAAW;IAAEC,KAAK,GAAAL,IAAA,CAALK,KAAK;IAAEC,EAAE,GAAAN,IAAA,CAAFM,EAAE;IAAEC,KAAK,GAAAP,IAAA,CAALO,KAAK;EAErE,IAAAC,SAAA,GAAsCnB,QAAQ,CAACgB,KAAK,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA9CG,WAAW,GAAAF,UAAA;IAAEG,cAAc,GAAAH,UAAA;EAClC,IAAAI,UAAA,GAAsCxB,QAAQ,CAAC,KAAK,CAAC;IAAAyB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAA9CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAGlC,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIX,EAAE,EAAK;IAC7B,IAAIY,gBAAgB,GAAAC,kBAAA,CAAKhB,QAAQ,CAAC;IAClC,IAAMiB,aAAa,GAAGF,gBAAgB,CAACG,SAAS,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAAChB,EAAE,KAAKA,EAAE;IAAA,EAAC;IAChEL,EAAE,CAACsB,WAAW,CAAC,UAAAC,EAAE,EAAG;MAClBA,EAAE,CAACC,UAAU,CAAC,+CAA+C,EAAE,CAACd,WAAW,EAAEL,EAAE,CAAC,EAC9E,UAACoB,KAAK,EAAEC,SAAS,EAAK;QACpB,IAAIA,SAAS,CAACC,YAAY,GAAG,CAAC,EAAE;UAC9BV,gBAAgB,CAACE,aAAa,CAAC,CAACjB,QAAQ,GAAGQ,WAAW;UACtDP,WAAW,CAACc,gBAAgB,CAAC;QAC/B;MACF,CAAC,EACD,UAACQ,KAAK,EAAEG,KAAK;QAAA,OAAKC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,KAAK,CAAC;MAAA,CAC7D,CAAC;IACH,CAAC,CAAC;EACN,CAAC;EAED,OACElC,KAAA,CAACqC,IAAI;IAACC,KAAK,EAAE;MAACC,aAAa,EAAC,KAAK;MAACC,eAAe,EAAC7C,MAAM,CAAC8C,OAAO,CAACC,KAAK;MAACzC,KAAK,EAACA,KAAK,GAAC,GAAG;MAAE0C,MAAM,EAAC,EAAE;MAACC,IAAI,EAAC;IAAC,CAAE;IAAAC,QAAA,GACtG/C,IAAA,CAACgD,SAAS;MAACC,OAAO,EAAE,SAAAA,QAAA;QAAA,OAAI1B,cAAc,CAAC,CAACD,WAAW,CAAC;MAAA,CAAC;MAACkB,KAAK,EAAE;QAACM,IAAI,EAACxB,WAAW,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;QAAC4B,cAAc,EAAC,QAAQ;QAAEC,UAAU,EAAC;MAAE,CAAE;MAAAJ,QAAA,EAC7H/C,IAAA,CAACoD,IAAI;QAACZ,KAAK,EAAE;UAACa,SAAS,EAAC;QAAM,CAAE;QAAAN,QAAA,EAAEtC;MAAI,CAAO;IAAC,CACrC,CAAC,EACZP,KAAA,CAACqC,IAAI;MAACC,KAAK,EAAE;QAACM,IAAI,EAAExB,WAAW,GAAE,CAAC,GAAC,CAAC,GAAC,CAAC,GAAC,CAAC;QAAEgC,UAAU,EAAC,QAAQ;QAAEJ,cAAc,EAAC;MAAQ,CAAE;MAAAH,QAAA,GACtF/C,IAAA,CAACuC,IAAI;QAACC,KAAK,EAAE;UAACM,IAAI,EAAC,CAAC;UAACS,WAAW,EAAC,CAAC;UAACC,YAAY,EAAC,EAAE;UAACC,QAAQ,EAAC,UAAU;UAAEH,UAAU,EAAC,YAAY;UAAEJ,cAAc,EAAC,QAAQ;UAAE/C,KAAK,EAAC,KAAK;UAAEuC,eAAe,EAAC7C,MAAM,CAAC8C,OAAO,CAACC,KAAK;UAAEC,MAAM,EAAC;QAAE,CAAE;QAAAE,QAAA,EACtL/C,IAAA,CAACuC,IAAI;UAACC,KAAK,EAAE;YAACiB,QAAQ,EAAC,UAAU;YAACD,YAAY,EAAC,EAAE;YAAErD,KAAK,EAACS,KAAK,GAAC,GAAG;YAAE8B,eAAe,EAAC5B,KAAK;YAAE+B,MAAM,EAAC;UAAE;QAAE,CAAC;MAAC,CACpG,CAAC,EACP7C,IAAA,CAACF,MAAM;QACL0C,KAAK,EAAE;UAACrC,KAAK,EAAE,KAAK;UAAE0C,MAAM,EAAE;QAAE,CAAE;QAClCjC,KAAK,EAAEA,KAAM;QACb8C,aAAa,EAAE,SAAAA,cAAC9C,KAAK,EAAK;UAACO,cAAc,CAACP,KAAK,CAAC;UAACY,cAAc,CAACX,EAAE,CAAC;QAAC,CAAE;QACtE8C,IAAI,EAAE,CAAE;QACRC,cAAc,EAAE,aAAc;QAC9BC,YAAY,EAAE,CAAE;QAChBC,YAAY,EAAE,GAAI;QAClBC,qBAAqB,EAAE,aAAc;QACrCC,qBAAqB,EAAE;MAAc,CACtC,CAAC;IAAA,CACE,CAAC;EAAA,CACL,CAAC;AAEX;AACA,eAAe1D,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}