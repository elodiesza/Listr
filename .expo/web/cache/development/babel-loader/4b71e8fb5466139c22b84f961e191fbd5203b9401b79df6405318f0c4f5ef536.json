{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useState, useEffect } from 'react';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { Feather } from '@expo/vector-icons';\nimport NewTask from \"../modal/NewTask\";\nimport { container, colors } from \"../styles\";\nimport Task from \"./Task\";\nimport uuid from 'react-native-uuid';\nimport { useForm, Controller } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar width = Dimensions.get('window').width;\nvar height = Dimensions.get('window').height;\nexport default function MonthlyTasks(_ref) {\n  var db = _ref.db,\n    load = _ref.load,\n    loadx = _ref.loadx,\n    tracks = _ref.tracks,\n    setTracks = _ref.setTracks,\n    year = _ref.year,\n    month = _ref.month,\n    tasks = _ref.tasks,\n    setTasks = _ref.setTasks;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isKeyboardOpen = _useState2[0],\n    setIsKeyboardOpen = _useState2[1];\n  var openKeyboardAnimationValue = new Animated.Value(0);\n  var closeKeyboardAnimationValue = new Animated.Value(1);\n  var startOpenAnimation = function startOpenAnimation() {\n    Animated.timing(openKeyboardAnimationValue, {\n      toValue: 1,\n      duration: 300,\n      easing: Easing.ease,\n      useNativeDriver: false\n    }).start();\n  };\n  var startCloseAnimation = function startCloseAnimation() {\n    Animated.timing(closeKeyboardAnimationValue, {\n      toValue: 1,\n      duration: 300,\n      easing: Easing.ease,\n      useNativeDriver: false\n    }).start();\n  };\n  useEffect(function () {\n    if (isKeyboardOpen) {\n      startOpenAnimation();\n    } else {\n      startCloseAnimation();\n    }\n  }, [isKeyboardOpen]);\n  useEffect(function () {\n    var keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', function () {\n      setIsKeyboardOpen(true);\n    });\n    var keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', function () {\n      setIsKeyboardOpen(false);\n    });\n    return function () {\n      keyboardDidShowListener.remove();\n      keyboardDidHideListener.remove();\n    };\n  }, []);\n  var today = new Date();\n  var thisYear = today.getFullYear();\n  var thisMonth = today.getMonth();\n  var thisDay = today.getDate();\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    mlogs = _useState6[0],\n    setMLogs = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    addModalVisible = _useState8[0],\n    setAddModalVisible = _useState8[1];\n  var _useForm = useForm(),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    reset = _useForm.reset;\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    value = _useState10[0],\n    setValue = _useState10[1];\n  console.warn(tasks);\n  useEffect(function () {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS mlogs (id TEXT PRIMARY KEY, year INTEGER, month INTEGER, UNIQUE(year,month))');\n    });\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM mlogs', null, function (txObj, resultSet) {\n        return setMLogs(resultSet.rows._array);\n      }, function (txObj, error) {\n        return console.log('error selecting mlogs');\n      });\n    });\n    setIsLoading(false);\n  }, []);\n  useEffect(function () {\n    if (!isLoading && tasks.filter(function (c) {\n      return c.monthly == true;\n    }).length > 0 && mlogs.filter(function (c) {\n      return c.year == year && c.month == month;\n    })[0] == undefined) {\n      if (mlogs.length > 0) {\n        var existingLogs = _toConsumableArray(mlogs);\n        var lastLogIndex = mlogs.length - 1;\n        var lastLog = mlogs[lastLogIndex];\n        db.transaction(function (tx) {\n          tx.executeSql('INSERT INTO mlogs (id,year,month) values (?,?,?)', [uuid.v4(), year, month], function (txtObj, resultSet) {\n            existingLogs.push({\n              id: uuid.v4(),\n              year: year,\n              month: month\n            });\n            setMLogs(existingLogs);\n          });\n        });\n        var existingTasks = _toConsumableArray(tasks.filter(function (c) {\n          return c.monthly == true;\n        }));\n        var existingRecurringTasks = existingTasks.length == 0 ? '' : existingTasks.filter(function (c) {\n          return c.recurring == 1 && c.year == lastLog.year && c.month == lastLog.month;\n        });\n        existingLogs = [];\n        if (lastLog !== undefined) {\n          var monthsBetweenLastAndToday = (year - lastLog.year) * 12 + (month - lastLog.month);\n          for (var j = 0; j < monthsBetweenLastAndToday; j++) {\n            var newDate = new Date(lastLog.year, lastLog.month + j, 1);\n            var _loop = function _loop() {\n              var newTask = existingRecurringTasks[i].task;\n              var copytrack = existingRecurringTasks[i].track;\n              var copyTime = existingRecurringTasks[i].time;\n              db.transaction(function (tx) {\n                tx.executeSql('INSERT INTO tasks (id,task,year,month,day,taskState,recurring,monthly,track,time,section) values (?,?,?,?,?,?,?,?,?,?,?)', [uuid.v4(), newTask, newDate.getFullYear(), newDate.getMonth(), null, 0, 1, true, copytrack, copyTime, undefined], function (txtObj, resultSet) {\n                  existingTasks.push({\n                    id: uuid.v4(),\n                    task: newTask,\n                    year: newDate.getFullYear(),\n                    month: newDate.getMonth(),\n                    day: null,\n                    taskState: 0,\n                    recurring: 1,\n                    monthly: true,\n                    track: copytrack,\n                    time: copyTime,\n                    section: undefined\n                  });\n                  setTasks(existingTasks);\n                });\n              });\n            };\n            for (var i = 0; i < existingRecurringTasks.length; i++) {\n              _loop();\n            }\n          }\n          setTasks(existingTasks);\n        }\n      } else {\n        var _existingLogs = _toConsumableArray(mlogs);\n        db.transaction(function (tx) {\n          tx.executeSql('INSERT INTO mlogs (id,year,month) values (?,?,?)', [uuid.v4(), year, month], function (txtObj, resultSet) {\n            _existingLogs.push({\n              id: uuid.v4(),\n              year: year,\n              month: month\n            });\n            setMLogs(_existingLogs);\n          });\n        });\n      }\n    }\n  }, [isLoading, mlogs]);\n  var TransferDaily = function TransferDaily(id) {\n    var existingTasks = _toConsumableArray(tasks);\n    var indexToUpdate = existingTasks.findIndex(function (c) {\n      return c.id === id;\n    });\n    var toTransfer = tasks.filter(function (c) {\n      return c.id == id;\n    })[0];\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE tasks SET day = ? WHERE id = ?', [thisDay, id], function (txObj, resultSet) {\n        if (resultSet.rowsAffected > 0) {\n          existingTasks[indexToUpdate].day = thisDay;\n          setTasks(existingTasks);\n        }\n      }, function (txObj, error) {\n        return console.log('Error updating data', error);\n      });\n    });\n  };\n  var DeleteItem = function DeleteItem(_ref2) {\n    var id = _ref2.id;\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        backgroundColor: 'green',\n        flexDirection: 'row'\n      },\n      children: [_jsx(View, {\n        style: {\n          width: width * 0.9 - 50,\n          paddingRight: 12,\n          justifyContent: 'center',\n          alignItems: 'flex-end',\n          backgroundColor: 'yellowgreen'\n        },\n        children: _jsx(Pressable, {\n          onPress: function onPress() {\n            return TransferDaily(id);\n          },\n          children: _jsx(Feather, {\n            name: \"calendar\",\n            size: 25,\n            color: 'white'\n          })\n        })\n      }), _jsx(View, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center',\n          flex: 1,\n          backgroundColor: 'darkred'\n        },\n        children: _jsx(Pressable, {\n          onPress: function onPress() {\n            return db.transaction(function (tx) {\n              tx.executeSql('DELETE FROM tasks WHERE id = ?', [id], function (txObj, resultSet) {\n                if (resultSet.rowsAffected > 0) {\n                  var existingTasks = _toConsumableArray(tasks).filter(function (task) {\n                    return task.id !== id;\n                  });\n                  setTasks(existingTasks);\n                }\n              }, function (txObj, error) {\n                return console.log(error);\n              });\n            });\n          },\n          children: _jsx(Feather, {\n            name: \"trash-2\",\n            size: 25,\n            color: 'white'\n          })\n        })\n      })]\n    });\n  };\n  var addTask = function () {\n    var _ref3 = _asyncToGenerator(function* (data) {\n      var existingTasks = _toConsumableArray(tasks);\n      db.transaction(function (tx) {\n        tx.executeSql('INSERT INTO tasks (id,task,year,month,day,taskState,recurring, monthly, track, time, section) values (?,?,?,?,?,?,?,?,?,?,?)', [uuid.v4(), data.task, year, month, undefined, 0, 0, true, undefined, null, undefined], function (txtObj, resultSet) {\n          existingTasks.push({\n            id: uuid.v4(),\n            task: data.task,\n            year: year,\n            month: month,\n            day: undefined,\n            taskState: 0,\n            recurring: 0,\n            monthly: true,\n            track: undefined,\n            time: null,\n            section: undefined\n          });\n          setTasks(existingTasks);\n        }, function (txtObj, error) {\n          return console.warn('Error inserting data:', error);\n        });\n      });\n      reset();\n      loadx(!load);\n    });\n    return function addTask(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var dailyData = tasks.filter(function (c) {\n    return c.year == year && c.month == month && c.monthly == true;\n  });\n  return _jsxs(View, {\n    style: [container.body, {}],\n    children: [_jsxs(View, {\n      style: container.block,\n      children: [_jsx(View, {\n        style: container.tab,\n        children: _jsx(Text, {\n          style: container.tabtext,\n          children: \"MONTHLY\"\n        })\n      }), _jsxs(Animated.View, {\n        style: [container.listblock, {\n          marginBottom: isKeyboardOpen ? openKeyboardAnimationValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, height * 3 / 10]\n          }) : closeKeyboardAnimationValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [height * 3 / 10, 0]\n          }),\n          backgroundColor: colors.primary.white\n        }],\n        children: [_jsx(SwipeListView, {\n          data: dailyData,\n          scrollEnabled: true,\n          renderItem: function renderItem(_ref4) {\n            var item = _ref4.item;\n            return _jsx(Task, {\n              db: db,\n              tasks: tasks,\n              setTasks: setTasks,\n              tracks: tracks,\n              setTracks: setTracks,\n              sections: undefined,\n              date: new Date(year, month, 1),\n              task: item.task,\n              taskState: item.taskState,\n              id: item.id,\n              track: undefined,\n              time: undefined,\n              section: undefined,\n              trackScreen: false,\n              archive: false,\n              recurring: item.recurring,\n              tabcolor: undefined,\n              monthly: true,\n              year: item.year,\n              month: item.monthly,\n              day: item.day\n            });\n          },\n          renderHiddenItem: function renderHiddenItem(_ref5) {\n            var item = _ref5.item;\n            return _jsx(DeleteItem, {\n              id: item.id\n            });\n          },\n          bounces: false,\n          rightOpenValue: -100,\n          disableRightSwipe: true,\n          closeOnRowBeginSwipe: true\n        }), _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            height: 40,\n            paddingLeft: 15,\n            alignItems: 'center',\n            borderTopWidth: 1,\n            borderTopColor: colors.primary.gray\n          },\n          children: [_jsx(Controller, {\n            control: control,\n            name: \"task\",\n            render: function render(_ref6) {\n              var _ref6$field = _ref6.field,\n                value = _ref6$field.value,\n                onChange = _ref6$field.onChange,\n                onBlur = _ref6$field.onBlur,\n                error = _ref6.fieldState.error;\n              return _jsxs(View, {\n                style: {\n                  flex: 1,\n                  flexDirection: 'column'\n                },\n                children: [_jsx(TextInput, {\n                  value: value,\n                  onChangeText: onChange,\n                  onBlur: onBlur,\n                  placeholder: \"Insert new task in this track for this month\",\n                  style: {\n                    width: '100%',\n                    height: 40,\n                    borderColor: error ? 'red' : '#e8e8e8'\n                  }\n                }), error && _jsx(Text, {\n                  style: {\n                    color: 'red',\n                    alignSelf: 'stretch'\n                  },\n                  children: error.message || 'Error'\n                })]\n              });\n            },\n            rules: {\n              required: 'Input a Habit',\n              minLength: {\n                value: 3,\n                message: 'Task should be at least 3 characters long'\n              },\n              maxLength: {\n                value: 50,\n                message: 'Task should be max 50 characters long'\n              }\n            }\n          }), _jsx(Pressable, {\n            onPress: handleSubmit(addTask),\n            children: _jsx(Feather, {\n              name: \"plus-circle\",\n              size: 20,\n              color: colors.primary.purple,\n              style: {\n                right: 10\n              }\n            })\n          })]\n        })]\n      })]\n    }), _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return setAddModalVisible(true);\n      },\n      style: {\n        justifyContent: 'center',\n        position: 'absolute',\n        bottom: 55,\n        right: 15,\n        flex: 1\n      },\n      children: _jsx(Feather, {\n        name: \"plus-circle\",\n        size: 40,\n        color: colors.primary.purple\n      })\n    }), _jsx(NewTask, {\n      addModalVisible: addModalVisible === true,\n      setAddModalVisible: setAddModalVisible,\n      db: db,\n      tasks: tasks,\n      setTasks: setTasks,\n      tracks: tracks,\n      track: undefined,\n      section: undefined,\n      pageDate: undefined,\n      tracksScreen: false,\n      monthly: true\n    })]\n  });\n}","map":{"version":3,"names":["useState","useEffect","SwipeListView","Feather","NewTask","container","colors","Task","uuid","useForm","Controller","jsx","_jsx","jsxs","_jsxs","width","Dimensions","get","height","MonthlyTasks","_ref","db","load","loadx","tracks","setTracks","year","month","tasks","setTasks","_useState","_useState2","_slicedToArray","isKeyboardOpen","setIsKeyboardOpen","openKeyboardAnimationValue","Animated","Value","closeKeyboardAnimationValue","startOpenAnimation","timing","toValue","duration","easing","Easing","ease","useNativeDriver","start","startCloseAnimation","keyboardDidShowListener","Keyboard","addListener","keyboardDidHideListener","remove","today","Date","thisYear","getFullYear","thisMonth","getMonth","thisDay","getDate","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","mlogs","setMLogs","_useState7","_useState8","addModalVisible","setAddModalVisible","_useForm","control","handleSubmit","reset","_useState9","_useState10","value","setValue","console","warn","transaction","tx","executeSql","txObj","resultSet","rows","_array","error","log","filter","c","monthly","length","undefined","existingLogs","_toConsumableArray","lastLogIndex","lastLog","v4","txtObj","push","id","existingTasks","existingRecurringTasks","recurring","monthsBetweenLastAndToday","j","newDate","_loop","newTask","i","task","copytrack","track","copyTime","time","day","taskState","section","TransferDaily","indexToUpdate","findIndex","toTransfer","rowsAffected","DeleteItem","_ref2","View","style","flex","backgroundColor","flexDirection","children","paddingRight","justifyContent","alignItems","Pressable","onPress","name","size","color","addTask","_ref3","_asyncToGenerator","data","_x","apply","arguments","dailyData","body","block","tab","Text","tabtext","listblock","marginBottom","interpolate","inputRange","outputRange","primary","white","scrollEnabled","renderItem","_ref4","item","sections","date","trackScreen","archive","tabcolor","renderHiddenItem","_ref5","bounces","rightOpenValue","disableRightSwipe","closeOnRowBeginSwipe","paddingLeft","borderTopWidth","borderTopColor","gray","render","_ref6","_ref6$field","field","onChange","onBlur","fieldState","TextInput","onChangeText","placeholder","borderColor","alignSelf","message","rules","required","minLength","maxLength","purple","right","TouchableOpacity","position","bottom","pageDate","tracksScreen"],"sources":["/Users/elodie/Documents/GIT/todo/components/MonthlyTasks.tsx"],"sourcesContent":["import { FlatList, Keyboard,Animated, Easing, TextInput, Button, TouchableOpacity, Pressable, StyleSheet, Text, View, Dimensions } from 'react-native';\nimport { useState,useEffect } from 'react';\nimport { SwipeListView } from 'react-native-swipe-list-view';\nimport { Feather } from '@expo/vector-icons';\nimport NewTask from '../modal/NewTask';\nimport { container, colors } from '../styles';\nimport Task from './Task';\nimport uuid from 'react-native-uuid';\nimport { useForm, Controller, set } from 'react-hook-form';\n\nconst width = Dimensions.get('window').width;\nconst height = Dimensions.get('window').height;\n\nexport default function MonthlyTasks({db, load, loadx, tracks, setTracks, year, month, tasks, setTasks}) {\n  \n  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);\n  const openKeyboardAnimationValue = new Animated.Value(0);\n  const closeKeyboardAnimationValue = new Animated.Value(1);\n  \n    const startOpenAnimation = () => {\n      Animated.timing(openKeyboardAnimationValue, {\n        toValue: 1,\n        duration: 300,\n        easing: Easing.ease,\n        useNativeDriver: false,\n      }).start();\n    };\n    \n    const startCloseAnimation = () => {\n      Animated.timing(closeKeyboardAnimationValue, {\n        toValue: 1,\n        duration: 300,\n        easing: Easing.ease,\n        useNativeDriver: false,\n      }).start();\n    };\n\n    useEffect(() => {\n      if (isKeyboardOpen) {\n        startOpenAnimation();\n      } else {\n        startCloseAnimation();\n      }\n    }, [isKeyboardOpen]);\n\n  useEffect(() => {\n    const keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', () => {\n      setIsKeyboardOpen(true);\n    });\n\n    const keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', () => {\n      setIsKeyboardOpen(false);\n    });\n\n    return () => {\n      keyboardDidShowListener.remove();\n      keyboardDidHideListener.remove();\n    };\n  }, []);\n\n  const today = new Date();\n  const thisYear = today.getFullYear();\n  const thisMonth = today.getMonth();\n  const thisDay = today.getDate();\n  const [isLoading, setIsLoading] = useState(true);\n  const [mlogs, setMLogs] = useState([]);\n  const [addModalVisible, setAddModalVisible] = useState(false);\n  const {control, handleSubmit, reset} = useForm();\n  const [value, setValue] = useState('');\n\n  console.warn(tasks)\n\n  useEffect(() => {\n    db.transaction(tx => {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS mlogs (id TEXT PRIMARY KEY, year INTEGER, month INTEGER, UNIQUE(year,month))')\n    });\n\n    db.transaction(tx => {\n      tx.executeSql('SELECT * FROM mlogs', null,\n      (txObj, resultSet) => setMLogs(resultSet.rows._array),\n      (txObj, error) => console.log('error selecting mlogs')\n      );\n    });\n    setIsLoading(false);\n  },[]);\n\n  \n  useEffect(() => {\n    if (!isLoading && tasks.filter(c=>c.monthly==true).length > 0 && mlogs.filter(c=>(c.year==year && c.month==month))[0]==undefined) {\n      if(mlogs.length > 0){\n      let existingLogs = [...mlogs];  \n      let lastLogIndex = mlogs.length-1;\n      let lastLog = mlogs[lastLogIndex];\n        db.transaction(tx => {\n          tx.executeSql('INSERT INTO mlogs (id,year,month) values (?,?,?)',[uuid.v4(),year,month],\n            (txtObj,resultSet)=> {    \n              existingLogs.push({ id: uuid.v4(), year:year, month:month});\n              setMLogs(existingLogs);                      \n            },\n          );\n        });\n\n        let existingTasks=[...tasks.filter(c=>c.monthly==true)];\n\n        let existingRecurringTasks=(existingTasks.length==0)? '':existingTasks.filter(c=>(c.recurring==1 && c.year==lastLog.year && c.month==lastLog.month));\n        existingLogs=[];\n\n        if (lastLog!==undefined) {\n\n          var monthsBetweenLastAndToday = (year-lastLog.year)*12+(month-lastLog.month);\n          for(var j=0;j<monthsBetweenLastAndToday;j++){\n            var newDate=new Date(lastLog.year,lastLog.month+j,1);\n            for (var i=0; i<existingRecurringTasks.length;i++){    \n              let newTask=existingRecurringTasks[i].task;\n              let copytrack=existingRecurringTasks[i].track;\n              let copyTime=existingRecurringTasks[i].time;\n              db.transaction(tx => {\n                tx.executeSql('INSERT INTO tasks (id,task,year,month,day,taskState,recurring,monthly,track,time,section) values (?,?,?,?,?,?,?,?,?,?,?)',\n                [uuid.v4(),newTask,newDate.getFullYear(),newDate.getMonth(),null,0,1,true,copytrack,copyTime, undefined],\n                  (txtObj,resultSet)=> {   \n                    existingTasks.push({ id: uuid.v4(), task: newTask, year:newDate.getFullYear(), month:newDate.getMonth(), day:null, taskState:0, recurring:1, monthly: true, track:copytrack, time:copyTime, section:undefined});\n                    setTasks(existingTasks);\n                  },\n                );\n              });\n            }\n          }\n          setTasks(existingTasks);\n        }\n      }\n      else {\n        let existingLogs = [...mlogs];  \n          db.transaction(tx => {\n            tx.executeSql('INSERT INTO mlogs (id,year,month) values (?,?,?)',[uuid.v4(),year,month],\n              (txtObj,resultSet)=> {    \n                existingLogs.push({ id: uuid.v4(), year:year, month:month});\n                setMLogs(existingLogs);\n              },\n            );\n          });\n      }\n    }\n  },[isLoading, mlogs]);\n\n  \n  const TransferDaily = (id) => {\n    let existingTasks = [...tasks];\n    let indexToUpdate = existingTasks.findIndex(c => c.id === id);\n    let toTransfer = tasks.filter(c=>(c.id==id))[0];\n\n    db.transaction(tx=> {\n      tx.executeSql('UPDATE tasks SET day = ? WHERE id = ?', [thisDay, id],\n        (txObj, resultSet) => {\n          if (resultSet.rowsAffected > 0) {\n            existingTasks[indexToUpdate].day = thisDay;\n            setTasks(existingTasks);\n          }\n        },\n        (txObj, error) => console.log('Error updating data', error)\n      );\n    });\n  }\n\n  const DeleteItem = ({ id }) => (\n    <View style={{ flex: 1, backgroundColor: 'green', flexDirection: 'row' }}>\n      <View style={{ width: width*0.9 - 50, paddingRight: 12, justifyContent: 'center', alignItems: 'flex-end', backgroundColor: 'yellowgreen' }}>\n        <Pressable onPress={()=>TransferDaily(id)}>\n          <Feather name=\"calendar\" size={25} color={'white'} />\n        </Pressable>\n      </View>\n      <View style={{ justifyContent: 'center', alignItems: 'center', flex: 1, backgroundColor: 'darkred' }}>\n        <Pressable onPress={() => \n        db.transaction(tx => {\n          tx.executeSql('DELETE FROM tasks WHERE id = ?', [id],\n            (txObj, resultSet) => {\n              if (resultSet.rowsAffected > 0) {\n                let existingTasks = [...tasks].filter(task => task.id !== id);\n                setTasks(existingTasks);\n              }\n            },\n            (txObj, error) => console.log(error)\n          );\n        })}>\n          <Feather name=\"trash-2\" size={25} color={'white'} />\n        </Pressable>\n      </View>\n    </View>\n  );\n\n  const addTask = async (data) => {\n    let existingTasks = [...tasks]; \n    db.transaction((tx) => {\n      tx.executeSql('INSERT INTO tasks (id,task,year,month,day,taskState,recurring, monthly, track, time, section) values (?,?,?,?,?,?,?,?,?,?,?)',\n      [uuid.v4(),data.task,year,month,undefined,0,0,true,undefined,null,undefined],\n      (txtObj,resultSet)=> {    \n        existingTasks.push({ id: uuid.v4(), task: data.task, year:year, month:month, day:undefined, taskState:0, recurring:0, \n          monthly:true, track:undefined, time:null, section: undefined});\n        setTasks(existingTasks);\n      },\n      (txtObj, error) => console.warn('Error inserting data:', error)\n      );\n    });\n    reset();\n    loadx(!load);\n  };\n\n\n  const dailyData = tasks.filter(c=>(c.year==year && c.month==month && c.monthly==true));\n\n  return (\n      <View style={[container.body,{}]}>\n        <View style={container.block}>\n          <View style={container.tab}>\n            <Text style={container.tabtext}>\n              MONTHLY\n            </Text>\n          </View>\n          <Animated.View\n            style={[\n              container.listblock,\n              {\n                marginBottom: isKeyboardOpen\n                  ? openKeyboardAnimationValue.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0, height * 3 / 10],\n                    })\n                  : closeKeyboardAnimationValue.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [height * 3 / 10, 0],\n                    }),\n                backgroundColor: colors.primary.white,\n              },\n            ]}\n          >\n            <SwipeListView \n              data={dailyData} \n              scrollEnabled={true} \n              renderItem={({ item }) => <Task db={db} tasks={tasks} setTasks={setTasks} tracks={tracks} setTracks={setTracks} \n              sections={undefined} date={new Date(year,month,1)} task={item.task} taskState={item.taskState} id={item.id} track={undefined} \n              time={undefined} section={undefined} trackScreen={false} archive={false} recurring={item.recurring} tabcolor={undefined} monthly={true} year={item.year} month={item.monthly} day={item.day}/>} \n              renderHiddenItem={({ item }) => <DeleteItem id={item.id} />} bounces={false} \n              rightOpenValue={-100}\n              disableRightSwipe={true}\n              closeOnRowBeginSwipe={true}\n            />\n            <View style={{flexDirection:'row', height:40, paddingLeft:15, alignItems:'center', borderTopWidth:1,borderTopColor:colors.primary.gray}}>\n              <Controller\n                control= {control}\n                name=\"task\"\n                render={({field: {value, onChange, onBlur}, fieldState: {error}}) => (\n                  <View style={{flex:1, flexDirection:'column'}}>\n                    <TextInput\n                      value={value}\n                      onChangeText={onChange}\n                      onBlur={onBlur}\n                      placeholder=\"Insert new task in this track for this month\"\n                      style={{width:'100%',height:40, borderColor: error ? 'red' : '#e8e8e8'}}\n                    />\n                    {error && (\n                      <Text style={{color: 'red', alignSelf: 'stretch'}}>{error.message || 'Error'}</Text>\n                    )}\n                  </View>\n                )}\n                rules={{\n                  required: 'Input a Habit',\n                  minLength: {\n                    value: 3,\n                    message: 'Task should be at least 3 characters long',\n                  },\n                  maxLength: {\n                    value: 50,\n                    message: 'Task should be max 50 characters long',\n                  },\n                }}\n              />\n              <Pressable onPress={handleSubmit(addTask)}>\n                <Feather name=\"plus-circle\" size={20} color={colors.primary.purple} style={{right:10}}/>\n              </Pressable>\n            </View>\n          </Animated.View>\n        </View>\n      \n      <TouchableOpacity onPress={() => setAddModalVisible(true)} style={{justifyContent: 'center', position: 'absolute', bottom:55, right: 15, flex: 1}}>\n        <Feather name='plus-circle' size={40} color={colors.primary.purple} />\n      </ TouchableOpacity> \n      <NewTask\n        addModalVisible={addModalVisible===true}\n        setAddModalVisible={setAddModalVisible}\n        db={db}\n        tasks={tasks}\n        setTasks={setTasks}\n        tracks={tracks}\n        track={undefined}\n        section={undefined}\n        pageDate={undefined}\n        tracksScreen={false}\n        monthly={true}\n      />\n    </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}